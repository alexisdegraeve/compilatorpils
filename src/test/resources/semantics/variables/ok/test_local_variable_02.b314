declare and retain
	b1 as boolean;
	b2 as boolean;
    i1 as integer;
    i2 as integer;
    i3 as integer;
    s1 as square;
    s2 as square;
    v1 as boolean[5, 7];
    v2 as integer[42];

    f1 as square;
    fct1 as function():square
    	do
    		skip
    	return f1
    	done

    fct2 as function(x as integer, y as boolean):integer
    	declare local
    		loc1 as integer;
    		loc2 as boolean;
    		loc3 as square;
    		loc4 as integer[5];
    	do
    	    set loc1 to 50
    		compute loc1 + 2 - loc4[0 + 1 - i1] = 5 and not loc2 or loc3 = dirt
    	return loc1
    	done




	by default do
		skip
	done